From e136ac59f2473cc76028213f6b4f470d645214f4 Mon Sep 17 00:00:00 2001
From: Rve27 <rve27github@gmail.com>
Date: Sun, 6 Apr 2025 15:08:05 +0800
Subject: [PATCH] power: smb-lib: Implement bypass charging

Signed-off-by: Rve27 <rve27github@gmail.com>
---
 drivers/power/supply/qcom/smb-lib.c | 43 +++++++++++++++++++++++++----
 drivers/power/supply/qcom/smb-lib.h |  1 +
 2 files changed, 38 insertions(+), 6 deletions(-)

diff --git a/drivers/power/supply/qcom/smb-lib.c b/drivers/power/supply/qcom/smb-lib.c
index 47c6fa19d49a..a83483cbe5a5 100644
--- a/drivers/power/supply/qcom/smb-lib.c
+++ b/drivers/power/supply/qcom/smb-lib.c
@@ -40,6 +40,8 @@
 				__func__, ##__VA_ARGS__);	\
 	} while (0)
 
+static int bypass_charging = 0;
+
 static bool off_charge_flag;
 static void smblib_wireless_set_enable(struct smb_charger *chg, int enable);
 
@@ -1995,9 +1997,14 @@ int smblib_vbus_regulator_is_enabled(struct regulator_dev *rdev)
 int smblib_get_prop_input_suspend(struct smb_charger *chg,
 				  union power_supply_propval *val)
 {
-	val->intval
-		= (get_client_vote(chg->usb_icl_votable, USER_VOTER) == 0)
-		 || get_client_vote(chg->dc_suspend_votable, USER_VOTER);
+	if ((get_client_vote(chg->chg_disable_votable, BYPASS_VOTER) == 1)) {
+        	val->intval = 1;
+        } else if (bypass_charging) {
+        	val->intval = 2;
+        } else {
+        	val->intval = 0;
+        }
+
 	return 0;
 }
 
@@ -2387,7 +2394,17 @@ int smblib_set_prop_input_suspend(struct smb_charger *chg,
 	int rc;
 
 	/* vote 0mA when suspended */
-	rc = vote(chg->usb_icl_votable, USER_VOTER, (bool)val->intval, 0);
+	if (val->intval == 1) {
+        	rc = vote(chg->chg_disable_votable, BYPASS_VOTER, 1, 0);
+        	bypass_charging = 0;
+     	} else if (val->intval == 2) {
+        	rc = vote(chg->chg_disable_votable, BYPASS_VOTER, 0, 0);
+        	bypass_charging = 1;
+     	} else {
+        	rc = vote(chg->chg_disable_votable, BYPASS_VOTER, 0, 0);
+        	bypass_charging = 0;
+        }
+
 	if (rc < 0) {
 		smblib_err(chg, "Couldn't vote to %s USB rc=%d\n",
 			(bool)val->intval ? "suspend" : "resume", rc);
@@ -2437,6 +2454,7 @@ int smblib_set_prop_dc_temp_level(struct smb_charger *chg,
 	union power_supply_propval dc_present;
 	union power_supply_propval batt_temp;
 	int rc;
+	int system_temp_level;
 
 	rc = smblib_get_prop_dc_present(chg, &dc_present);
 	if (rc < 0) {
@@ -2465,12 +2483,25 @@ int smblib_set_prop_dc_temp_level(struct smb_charger *chg,
 		return vote(chg->chg_disable_votable,
 			THERMAL_DAEMON_VOTER, true, 0);
 
+	if (get_client_vote(chg->chg_disable_votable, BYPASS_VOTER) == 1) {
+		pr_info("%s bypass charging enabled",__FUNCTION__);
+        	return vote(chg->chg_disable_votable, THERMAL_DAEMON_VOTER, true, 0);
+        }
+
+	system_temp_level = chg->dc_temp_level;
+
+     	if (bypass_charging) {
+        	system_temp_level = chg->dc_temp_level-2;
+        	if (system_temp_level < 0) system_temp_level = 0;
+        	pr_info("%s limited charging enabled %d",__FUNCTION__, system_temp_level);
+     	}
+
 	vote(chg->chg_disable_votable, THERMAL_DAEMON_VOTER, false, 0);
-	if (chg->dc_temp_level == 0)
+	if (system_temp_level == 0)
 		return vote(chg->dc_icl_votable, THERMAL_DAEMON_VOTER, false, 0);
 
 	vote(chg->dc_icl_votable, THERMAL_DAEMON_VOTER, true,
-		chg->thermal_mitigation_dc[chg->dc_temp_level]);
+		chg->thermal_mitigation_dc[system_temp_level]);
 
 	return 0;
 }
diff --git a/drivers/power/supply/qcom/smb-lib.h b/drivers/power/supply/qcom/smb-lib.h
index 358a90225e40..0d5827b5a527 100644
--- a/drivers/power/supply/qcom/smb-lib.h
+++ b/drivers/power/supply/qcom/smb-lib.h
@@ -95,6 +95,7 @@ enum hvdcp3_type {
 #define PD_NOT_SUPPORTED_VOTER		"PD_NOT_SUPPORTED_VOTER"
 #define DCIN_USER_VOTER			"DCIN_USER_VOTER"
 #define UNSTANDARD_QC2_VOTER		"UNSTANDARD_QC2_VOTER"
+#define BYPASS_VOTER			"BYPASS_VOTER"
 
 #define VCONN_MAX_ATTEMPTS	3
 #define OTG_MAX_ATTEMPTS	3
-- 
2.45.2

